#!/bin/bash
#
#  http commands to management of application roles
#
#

# set -x

waitForKeyrock () {
	echo -e "\n⏳ Waiting for \033[1;31mIdM\033[0m to be available"

  value=$(http -h http://localhost:3005/version 2>/dev/null | grep HTTP/ | awk '{print $2}')
	while (( value != 200 ))
	do
		echo -e "IdM HTTP state: $value (waiting for 200)"
		sleep 5
    value=$(http -h http://localhost:3005/version 2>/dev/null | grep HTTP/ | awk '{print $2}')
	done

	echo -e " \033[1;32mdone\033[0m"
}


echo -e "\n⏳ Obtaining the X-Subject-Token for admin user: Alice"

#
# Get admin token
#
TOKEN=$(http -h POST http://localhost:3005/v1/auth/tokens \
  name=alice-the-admin@test.com \
  password=test | grep 'X-Subject-Token' | awk '{print $2}')

echo -e "          ... Token: $TOKEN"
export TOKEN


#
# Create new application
#
echo -e "\n⏳ Creating a new application into IdM"

APP=$(printf '{
  "application": {
    "name": "Personal Data Mgmt. Application",
    "description": "FIWARE Application protected by OAuth2 for managing Personal Data",
    "redirect_uri": "http://localhost:1027/login",
    "url": "http://localhost:1027/ngsi-ld/v1",
    "grant_type": [
      "authorization_code",
      "implicit",
      "password"
    ]
  }
}' | http  POST http://localhost:3005/v1/applications \
 Content-Type:'application/json' \
 X-Auth-Token:"$TOKEN" | jq -r .application.id)

CLIENT_SECRET=$(http GET "http://localhost:3005/v1/applications/$APP" \
 Content-Type:'application/json' \
 X-Auth-Token:"$TOKEN" | jq -r .application.secret)

BASE64=$(echo -n "$APP:$CLIENT_SECRET" | base64)

export APP
export BASE64

echo -e "          ... Application ID (Client Id): $APP"
echo -e "          ... Client Secret: $CLIENT_SECRET"
echo -e "          ... Base64(Client Id:Client Secret): $BASE64"


#
# Create the corresponding permissions
#
echo -e "\n⏳ Creating the permissions for /entities and /entityOperations"

PERM_GET_ALL=$(printf '{
  "permission": {
    "name": "Permission to get Personal Data information of an entity (all entities)",
    "action": "GET",
    "resource": "/ngsi-ld/v1/entities/*",
    "is_regex": true
  }
}' | http POST "http://localhost:3005/v1/applications/$APP/permissions" \
 Content-Type:'application/json' \
 X-Auth-Token:"$TOKEN" | jq -r .permission.id)

i=1
for a in person001 person002 person003 person004
do
  a="urn:ngsi-ld:Person:"$a

  arrayPermGetOne[i]=$(printf '{
  "permission": {
    "name": "Permission to get Personal Data information of an entity (%s)",
    "action": "GET",
    "resource": "/ngsi-ld/v1/entities/%s"
  }
}' $a $a  | http POST "http://localhost:3005/v1/applications/$APP/permissions" \
 Content-Type:'application/json' \
 X-Auth-Token:"$TOKEN" | jq -r .permission.id)

  arrayPermUpdateOne[i]=$(printf '{
  "permission": {
    "name": "Permission to Update the Personal Data information associated to an entity (%s)",
    "action": "PATCH",
    "resource": "/ngsi-ld/v1/entities/%s/attrs/.*",
    "is_regex": true
  }
}' $a $a  | http POST "http://localhost:3005/v1/applications/$APP/permissions" \
 Content-Type:'application/json' \
 X-Auth-Token:"$TOKEN" | jq -r .permission.id)

  echo -e "          ... Permission GET one($a) ID:   ${arrayPermGetOne[i]}"
  echo -e "          ... Permission PATCH one($a) ID: ${arrayPermUpdateOne[i]}"
  i=$((i+1))
done

PERM_UPSERT=$(printf '{
  "permission": {
    "name": "Permission to add some entities",
    "action": "POST",
    "resource": "/ngsi-ld/v1/entityOperations/upsert"
  }
}' | http POST "http://localhost:3005/v1/applications/$APP/permissions" \
 Content-Type:'application/json' \
 X-Auth-Token:"$TOKEN" | jq -r .permission.id)

PERM_UPDATE_ALL=$(printf '{
  "permission": {
    "name": "Permission to update the information associated to an entity (all entities)",
    "action": "PATCH",
    "resource": "/ngsi-ld/v1/entities/.*/attrs/.*",
    "is_regex": true
  }
}' | http POST "http://localhost:3005/v1/applications/$APP/permissions" \
 Content-Type:'application/json' \
 X-Auth-Token:"$TOKEN" | jq -r .permission.id)


echo -e "          ... Permission GET all ID: $PERM_GET_ALL"
echo -e "          ... Permission Upsert all ID: $PERM_UPSERT"
echo -e "          ... Permission PATCH all ID: $PERM_UPDATE_ALL"


#
# Create the roles Manager, Users, Data or Others
#
echo -e "\n⏳ Creating the roles Manager, Users, Data or Others"

i=1
for a in Manager Users Data
do
  arrayRoles[i]=$(printf '{
    "role": {
      "name": "%s"
    }
  }' $a | http POST "http://localhost:3005/v1/applications/$APP/roles" \
   X-Auth-Token:"$TOKEN" | jq -r .role.id)

  echo -e "          ... Role($a) ID: ${arrayRoles[i]}"
  i=$((i+1))
done

i=1
for a in Person001 Person002 Person003 Person004
do
  arrayDataRoles[i]=$(printf '{
    "role": {
      "name": "%s"
    }
  }' $a | http POST "http://localhost:3005/v1/applications/$APP/roles" \
   X-Auth-Token:"$TOKEN" | jq -r .role.id)

  echo -e "          ... Role($a) ID: ${arrayDataRoles[i]}"
  i=$((i+1))
done

ROLE_MANAGER=${arrayRoles[1]}
ROLE_USER=${arrayRoles[2]}
ROLE_PERSON001=${arrayDataRoles[1]}
ROLE_PERSON002=${arrayDataRoles[2]}
ROLE_PERSON003=${arrayDataRoles[3]}
ROLE_PERSON004=${arrayDataRoles[4]}

export ROLE_MANAGER
export ROLE_USER
export ROLE_PERSON001
export ROLE_PERSON002
export ROLE_PERSON003
export ROLE_PERSON004


#
# | *Role*    | *Permissions* |
# | --------- | ------------- |
# | Manager   | #1(GET:/entities/*), #3(POST:/entityOperations/upsert), #4(PATCH:/entities/*)    |
# | Users     | #1(GET:/entities/*)            |
# | Data(n)   | #2(GET:/entities/{{entityID}}), #5(PATCH:/entities/{{entityID}})        |
# | Others    |               |
#

echo -e "\n⏳ Assign the permissions to the roles in the application"

# Managers
http -q PUT "http://localhost:3005/v1/applications/$APP/roles/${arrayRoles[1]}/permissions/$PERM_GET_ALL" \
 Content-Type:'application/json' \
 X-Auth-Token:"$TOKEN"

http -q PUT "http://localhost:3005/v1/applications/$APP/roles/${arrayRoles[1]}/permissions/$PERM_UPSERT" \
 Content-Type:'application/json' \
 X-Auth-Token:"$TOKEN"

http -q PUT "http://localhost:3005/v1/applications/$APP/roles/${arrayRoles[1]}/permissions/$PERM_UPDATE_ALL" \
 Content-Type:'application/json' \
 X-Auth-Token:"$TOKEN"



# Users
http -q PUT "http://localhost:3005/v1/applications/$APP/roles/${arrayRoles[2]}/permissions/$PERM_GET_ALL" \
 Content-Type:'application/json' \
 X-Auth-Token:"$TOKEN"



# Data
for (( i=1; i<5; i++ ))
do
  http -q PUT "http://localhost:3005/v1/applications/$APP/roles/${arrayDataRoles[i]}/permissions/${arrayPermGetOne[i]}" \
    Content-Type:'application/json' \
    X-Auth-Token:"$TOKEN"

  http -q PUT "http://localhost:3005/v1/applications/$APP/roles/${arrayDataRoles[i]}/permissions/${arrayPermUpdateOne[i]}" \
    Content-Type:'application/json' \
    X-Auth-Token:"$TOKEN"
done


#
#  http commands to create a new PEP Proxy credentials associated to an Application ID
#
#

echo -e "\n⏳ Creating new PEP Proxy credentials"

# | Data               | Request response          | Configuration parameter |
# | ------------------ | ------------------------- | ----------------------- |
# | PEP Proxy Username | pep.proxy.id              | PEP_PROXY_USERNAME      |
# | PEP Proxy Password | pep_proxy.password        | PEP_PASSWORD            |
# | Application Id     | pep_proxy.oauth_client_id | PEP_PROXY_APP_ID        |

PEP_PROXY=$(http POST "http://localhost:3005/v1/applications/$APP/pep_proxies" \
Content-Type:application/json \
X-Auth-Token:"$TOKEN" | jq .pep_proxy)

PEP_PROXY_USERNAME=$(echo "$PEP_PROXY" | jq -r .id)
PEP_PASSWORD=$(echo "$PEP_PROXY" | jq -r .password)

PEP_PROXY_APP_ID=$(http GET "http://localhost:3005/v1/applications/$APP/pep_proxies" \
Content-Type:application/json \
X-Auth-Token:"$TOKEN" | jq -r .pep_proxy.oauth_client_id)

echo -e "          ... PEP Proxy Username (PEP_PROXY_USERNAME): $PEP_PROXY_USERNAME"
echo -e "          ... PEP Proxy Password (PEP_PASSWORD): $PEP_PASSWORD"
echo -e "          ... Application Id (PEP_PROXY_APP_ID): $PEP_PROXY_APP_ID"

#
# Update docker-compose with the new PEP Proxy credentials
#
sed -i .bak "s/pep\_proxy\_00000000\-0000\-0000\-0000\-000000000000/$PEP_PROXY_USERNAME/g" docker-compose.yml
sed -i '' "s/tutorial\-dckr\-site\-0000\-xpresswebapp/$PEP_PROXY_APP_ID/g" docker-compose.yml
sed -i '' "s/PEP\_PASSWORD\=test/PEP\_PASSWORD=$PEP_PASSWORD/g" docker-compose.yml

#
# Upload the docker-compose PEP Proxy container
#
echo
docker-compose --log-level ERROR -p fiware up -d --remove-orphans

# Display services

echo
docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" --filter name=fiware-*

waitForKeyrock


#
# Grant access to the Personal Data Management Application for the organizations: Managers, Users
#
echo -e "\n⏳ Grant access to the Personal Data Management Application for the organizations: Managers, Users"

# | Application Id | Role Id       | Organization Id |
# | -------------- | ------------- | --------------- |
# | $APP           | $ROLE_MANAGER | $MANAGERS       |
# | $APP           | $ROLE_USER    | $USERS          |

http -q PUT "http://localhost:3005/v1/applications/$APP/organizations/$MANAGERS/roles/$ROLE_MANAGER/organization_roles/member" \
Content-Type:application/json \
X-Auth-Token:"$TOKEN"


http -q PUT "http://localhost:3005/v1/applications/$APP/organizations/$USERS/roles/$ROLE_USER/organization_roles/member" \
Content-Type:application/json \
X-Auth-Token:"$TOKEN"

#
# Grant access to the Personal Data Management Application for the persons: Ole, Torsten, Frank, and Lothar
#
echo -e "\n⏳ Grant access to the Personal Data Management Application for users: Ole, Torsten, Frank, Lothar"

# | Application Id | Role Id         | Person Id       |
# | -------------- | --------------- | --------------- |
# | $APP           | $ROLE_PERSON001 | $OLE            |
# | $APP           | $ROLE_PERSON002 | $TORSTEN        |
# | $APP           | $ROLE_PERSON003 | $FRANK          |
# | $APP           | $ROLE_PERSON004 | $LOTHAR         |


http -q PUT "http://localhost:3005/v1/applications/$APP/users/$OLE/roles/$ROLE_PERSON001" \
Content-Type:application/json \
X-Auth-Token:"$TOKEN"

http -q PUT "http://localhost:3005/v1/applications/$APP/users/$TORSTEN/roles/$ROLE_PERSON002" \
Content-Type:application/json \
X-Auth-Token:"$TOKEN"

http -q PUT "http://localhost:3005/v1/applications/$APP/users/$FRANK/roles/$ROLE_PERSON003" \
Content-Type:application/json \
X-Auth-Token:"$TOKEN"

http -q PUT "http://localhost:3005/v1/applications/$APP/users/$LOTHAR/roles/$ROLE_PERSON004" \
Content-Type:application/json \
X-Auth-Token:"$TOKEN"


echo -e "\n \033[1;32mdone\033[0m"
