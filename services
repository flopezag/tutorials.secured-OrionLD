#!/bin/bash
#
#  Command Line Interface to start all services associated with the Getting-Started Tutorial
#
#  For this tutorial the commands are merely a convenience script to run docker-compose
#

set -e
set -x

if (( $# != 1 )); then
    echo "Illegal number of parameters"
    echo "usage: services [help|create|start|stop]"
    exit 1
fi

loadData () {
	export CONTEXT_BROKER="$1"
	addDatabaseIndex
	docker run --rm -v "$(pwd)/import-data":"/import-data" \
		--network fiware_default \
		-e CONTEXT_BROKER=${CONTEXT_BROKER} \
		-e TUTORIAL_DATA_MODELS_CONTEXT="https://schema.lab.fiware.org/ld/context" \
		--entrypoint /bin/ash curlimages/curl import-data

	echo -e " \033[1;32mdone\033[0m"
}

waitForKeyrock () {
	printf "⏳ Waiting for \033[1;31mKeyrock\033[0m to be available\n"

	while [ `curl -s -o /dev/null -w %{http_code} 'http://localhost:3005/version'` -eq 000 ]
	do
		echo -e "Keyrock HTTP state: " `curl -s -o /dev/null -w %{http_code} 'http://localhost:3005/version'` " (waiting for 200)"
		sleep 5
	done

	echo -e " \033[1;32mdone\033[0m"
}

waitForOrion () {
	echo -e "\n⏳ Waiting for \033[1;34mOrionLD\033[0m to be available\n"
	while [ `docker run --network fiware_default --rm curlimages/curl -s -o /dev/null -w %{http_code} 'http://orionld:1026/version'` -eq 000 ]
	do
	  echo -e "Context Broker HTTP state: " `curl -s -o /dev/null -w %{http_code} 'http://localhost:1026/version'` " (waiting for 200)"
	  sleep 1
	done

  echo -e " \033[1;32mdone\033[0m"
}

displayServices () {
	echo ""
	docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" --filter name=fiware-*

  echo -e " \033[1;32mdone\033[0m"
}

addDatabaseIndex () {
	printf "Adding appropriate \033[1mMongoDB\033[0m indexes for \033[1;34mOrionLD\033[0m  ..."
	docker exec  mongo-db mongo --eval '
	conn = new Mongo();db.createCollection("orion");
	db = conn.getDB("orion");
	db.createCollection("entities");
	db.entities.createIndex({"_id.servicePath": 1, "_id.id": 1, "_id.type": 1}, {unique: true});
	db.entities.createIndex({"_id.type": 1});
	db.entities.createIndex({"_id.id": 1});' > /dev/null

	docker exec  mongo-db mongo --eval '
	conn = new Mongo();db.createCollection("orion-openiot");
	db = conn.getDB("orion-openiot");
	db.createCollection("entities");
	db.entities.createIndex({"_id.servicePath": 1, "_id.id": 1, "_id.type": 1}, {unique: true});
	db.entities.createIndex({"_id.type": 1});
	db.entities.createIndex({"_id.id": 1});' > /dev/null

	echo -e " \033[1;32mdone\033[0m"
}

startContainers () {
	echo ""
	export IDM_HTTPS_ENABLED="$1"
	docker-compose --log-level ERROR -p fiware up -d --remove-orphans

  echo -e " \033[1;32mdone\033[0m"
}

stoppingContainers () {
	echo "Stopping containers"
	docker-compose --log-level ERROR -p fiware down -v --remove-orphans

  echo -e " \033[1;32mdone\033[0m"
}

command="$1"
case "${command}" in
	"help")
    echo "usage: services [help|create|start|stop]"
        ;;
  "start")
		stoppingContainers
		echo -e "Starting seven containers \033[1;34mOrionLD\033[0m, \033[1;31mIdM\033[0m, \033[1;31mOrion PEP Proxy\033[0m, and \033[1mMongoDB\033[0m and \033[1mMySQL\033[0m databases."
		echo -e "- \033[1;34mOrionLD\033[0m is the Context Broker"
		echo -e "- \033[1;31mIdM\033[0m is an Identity Management Front-End"
		echo -e "- \033[1;31mOrion PEP Proxy\033[0m is a PEP Proxy around \033[1;34mOrionLD\033[0m"
		startContainers false
		waitForKeyrock
		waitForOrion
		loadData orionld:1026
		displayServices
		;;
	"stop")
		stoppingContainers
		;;
	"create")
		echo "Pulling Docker images"
		docker-compose --log-level ERROR -p fiware pull
		;;
	*)
		echo "Command not Found."
		echo "usage: services [help|create|start|stop]"
		exit 127;
		;;
esac


